#!/usr/bin/env node

'use strict';

const {NetCheckNode} = require('hsd-nethealth');
const JSONWriter = require('../lib/log/jsonwriter');
const {getConfigs} = require('../lib/config');

const config = getConfigs({
  argv: true,
  env: true
});

const node = new NetCheckNode({
  ...config.env,
  ...config.args,
  ...config.data,
  prefix: config.prefix
});

const dnsStore = new JSONWriter({
  prefix: config.prefix,
  name: config.str('dns-name', 'dns'),
  maxFileSize: config.mb('dns-max-file-size', 50 << 20), // default 50MB
  autoGzip: config.bool('dns-auto-gzip', true)
});

const nodesStore = new JSONWriter({
  prefix: config.prefix,
  name: config.str('nodes-name', 'nodes'),
  maxFileSize: config.mb('nodes-max-file-size', 50 << 20), // default 50MB
  autoGzip: config.bool('nodes-auto-gzip', true)
});

node.on('error', (err) => {
  console.error(err.stack);
});

// Write to stores.
node.on('dns-success', (info) => {
  writeData(dnsStore, info);
});

node.on('dns-fail', (info) => {
  writeData(dnsStore, info);
});

node.on('node-success', (info) => {
  writeData(nodesStore, info);
});

node.on('node-fail', (info) => {
  writeData(nodesStore, info);
});

function writeData(store, info) {
  store.writeJSONLine({
    logTimestamp: Date.now(),
    info
  });
}

(async () => {
  await dnsStore.open();
  await nodesStore.open();
  await node.open();
})().catch((e) => {
  console.error(e.stack);
  process.exit(1);
});
